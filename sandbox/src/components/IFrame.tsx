import { IframeHTMLAttributes, useEffect, useRef } from "react";
import { useWeb3Provider } from '@decent-org/wallet-provider'
const appIframeSandbox = [
  // Allows downloads to be initiated by the user
  // Required for Chrome 83+ (see https://www.chromestatus.com/feature/5706745674465280)
  'allow-downloads',

  // Allow forms to be submitted
  'allow-forms',

  // Allows new browsing contexts to be created (window.open, target="_blank").
  'allow-popups',

  // Allows new browsing contexts (e.g. new windows or tabs) generated by the
  // iframe to escape the sandbox restrictions. Otherwise, new contexts would
  // share the same restrictions as their originating iframe (in our case, the
  // new contexts would only have the ability to run JavaScript).
  'allow-popups-to-escape-sandbox',

  // Gotta run 'em all!
  'allow-scripts',

  // Note that we haven't enabled:
  //   - 'allow-same-origin':
  //       The most important security setting: leaving this disabled lets the
  //       iframe be considered as coming from a unique, orphan origin. This
  //       means that the page won't have access to any cookies, local/session
  //       storage, or access to open pages (e.g. the parent window, this Dapp).
  //
  //       However, this does force some restrictions:
  //         - `window.postMessage()` must use `*` as an origin to communicate
  //           with this iframe
  //         - React devtools can't be hooked in from the browser, so you have
  //           to use the native `react-devtools` electron app for debugging
  //
  //  - 'allow-top-navigation':
  //       Leaving this disabled disallows the iframe from navigating the
  //       Dapp's context (e.g. to a malicious page)
].join(' ')

export function IFrame() {
  const { state: {provider} } = useWeb3Provider()
  const isMountedRef = useRef(false)
  const iframeRef = useRef<HTMLIFrameElement>(null)

  useEffect(() => {
    if (isMountedRef.current) {
      window.addEventListener("message", async (message) => {
        const data = message.data
        if (data.jsonrpc && data.jsonrpc === '2.0') {
          const response = await (provider as any).send(data.method, data.params)
          console.log("ðŸš€ ~ file: IFrame.tsx ~ line 52 ~ response", response)
          console.log("ðŸš€ ~ file: IFrame.tsx ~ line 57 ~ message", message)
          iframeRef!.current!.contentWindow!.postMessage({...data, result: response}, '*')
          // message.source?.postMessage(0x04, {})
        }
      })
    }
    isMountedRef.current = true
    return () => {
      window.removeEventListener("message", () => { })
    }
  })
  // return null
  return <iframe 
    title="appiframe"  
    src="http://localhost:8080" 
    name="AppIFrame"
    allow="camera *; microphone *"
    frameBorder="0"
    ref={iframeRef}
    sandbox={appIframeSandbox} />
}